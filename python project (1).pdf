{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "50232985-cf7c-4dea-b8c4-29f2a98f0fe4",
   "metadata": {},
   "source": [
    "# **EXPENCE TRACKER** : Using Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60fe2b71-24ca-484d-92e8-eebb732c6936",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Expense Tracker Menu:\n",
      "1. Add Expense\n",
      "2. Show All Expenses\n",
      "3. Filter by Category\n",
      "4. Show Expense Plot\n",
      "5. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option (1-5):  1\n",
      "Enter date (YYYY-MM-DD):  2024-11-02\n",
      "Enter category (Food, Travel, Rent, etc.):  Food\n",
      "Enter amount:  10000\n",
      "Enter description:  eat protein food\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expense added successfully!\n",
      "\n",
      "\n",
      "Expense Tracker Menu:\n",
      "1. Add Expense\n",
      "2. Show All Expenses\n",
      "3. Filter by Category\n",
      "4. Show Expense Plot\n",
      "5. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option (1-5):  1\n",
      "Enter date (YYYY-MM-DD):  2024-12-02\n",
      "Enter category (Food, Travel, Rent, etc.):  Food\n",
      "Enter amount:  5492\n",
      "Enter description:  normalfood\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expense added successfully!\n",
      "\n",
      "\n",
      "Expense Tracker Menu:\n",
      "1. Add Expense\n",
      "2. Show All Expenses\n",
      "3. Filter by Category\n",
      "4. Show Expense Plot\n",
      "5. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option (1-5):  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "All Expenses:\n",
      "\n",
      "         Date Category   Amount       Description\n",
      "0  2021-02-20     food   5000.0              some\n",
      "1  2021-05-22     food   6500.0              some\n",
      "2  2024-11-02     Food  10000.0  eat protein food\n",
      "3  2024-12-02     Food   5492.0        normalfood\n",
      "\n",
      "Expense Tracker Menu:\n",
      "1. Add Expense\n",
      "2. Show All Expenses\n",
      "3. Filter by Category\n",
      "4. Show Expense Plot\n",
      "5. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option (1-5):  3\n",
      "Enter category to filter:  4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Expenses for 4:\n",
      "\n",
      "Empty DataFrame\n",
      "Columns: [Date, Category, Amount, Description]\n",
      "Index: []\n",
      "\n",
      "Expense Tracker Menu:\n",
      "1. Add Expense\n",
      "2. Show All Expenses\n",
      "3. Filter by Category\n",
      "4. Show Expense Plot\n",
      "5. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option (1-5):  4\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Expense Tracker Menu:\n",
      "1. Add Expense\n",
      "2. Show All Expenses\n",
      "3. Filter by Category\n",
      "4. Show Expense Plot\n",
      "5. Exit\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt                            # importing libraries\n",
    "import os\n",
    "\n",
    "FILENAME = 'expenses.csv'                                 # file name\n",
    "\n",
    "                                                         # Initialize or load the CSV file\n",
    "if not os.path.exists(FILENAME):\n",
    "    df = pd.DataFrame(columns=['Date', 'Category', 'Amount', 'Description'])\n",
    "    df.to_csv(FILENAME, index=False)\n",
    "else:\n",
    "    df = pd.read_csv(FILENAME)\n",
    "def add_expense():                                          # Add a new expense\n",
    "    date = input(\"Enter date (YYYY-MM-DD): \")\n",
    "    category = input(\"Enter category (Food, Travel, Rent, etc.): \")\n",
    "    amount = float(input(\"Enter amount: \"))\n",
    "    description = input(\"Enter description: \")\n",
    "    \n",
    "    new_entry = {'Date': date, 'Category': category, 'Amount': amount, 'Description': description}\n",
    "    global df\n",
    "    df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)\n",
    "    df.to_csv(FILENAME, index=False)\n",
    "    print(\"Expense added successfully!\\n\")\n",
    "\n",
    "\n",
    "def show_expenses():\n",
    "    print(\"\\nAll Expenses:\\n\")                                     # Show all expenses\n",
    "    print(df)\n",
    "\n",
    "def filter_by_category():\n",
    "    category = input(\"Enter category to filter: \")\n",
    "    filtered = df[df['Category'].str.lower() == category.lower()]   # Filter by category\n",
    "    print(f\"\\nExpenses for {category}:\\n\")\n",
    "    print(filtered)\n",
    "def plot_expenses():\n",
    "    summary = df.groupby('Category')['Amount'].sum()\n",
    "    summary.plot(kind='bar', title='Spending by Category')             #basic plot for visualization\n",
    "    plt.xlabel('Category')\n",
    "    plt.ylabel('Total Spent')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "def menu():\n",
    "    while True:                                                        # menu as aclass\n",
    "        print(\"\\nExpense Tracker Menu:\")\n",
    "        print(\"1. Add Expense\")\n",
    "        print(\"2. Show All Expenses\")\n",
    "        print(\"3. Filter by Category\")\n",
    "        print(\"4. Show Expense Plot\")\n",
    "        print(\"5. Exit\")\n",
    "        choice = input(\"Choose an option (1-5): \")\n",
    "\n",
    "        if choice == '1':\n",
    "            add_expense()\n",
    "        elif choice == '2':\n",
    "            show_expenses()\n",
    "        elif choice == '3':\n",
    "            filter_by_category()\n",
    "        elif choice == '4':\n",
    "            plot_expenses()\n",
    "        elif choice == '5':\n",
    "            print(\"Exiting program.\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice. Try again.\")\n",
    "\n",
    "menu()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55438f7b-1237-4850-9247-b548a0ffdc76",
   "metadata": {},
   "source": [
    "### Key Features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29175292-f48c-4de2-ab19-6ebe354a3404",
   "metadata": {},
   "source": [
    "\n",
    "*Add new expenses with date, category, amount, and description\n",
    "\n",
    "*View all recorded expenses in tabular format\n",
    "\n",
    "*Filter expenses by category for focused tracking\n",
    "\n",
    "*Visualize total spending by category using bar charts\n",
    "\n",
    "*Persistent data storage in expenses.csv for reuse across sessions\n",
    "\n",
    "*Input validation for clean and accurate data entry\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84d84804-845b-4009-98e2-f2d60c107d75",
   "metadata": {},
   "source": [
    "#### I Used To Do This"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31e31bbe-2897-4a3e-94dd-bd05e68c47c4",
   "metadata": {},
   "source": [
    "\n",
    "*Python\n",
    "\n",
    "*Pandas\n",
    "\n",
    "*Matplotlib\n",
    "\n",
    "*CSV file handling\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5651e5be-0036-4215-ac30-8550d8512e53",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
